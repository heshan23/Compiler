declare i32 @getint()
declare void @putint(i32)
declare void @putch(i32)
declare void @putstr(i8*)
@N = dso_local constant i32 510
@M = dso_local constant i32 -520
@KK = dso_local constant i32 -1
@NN = dso_local constant i32 55
@MM = dso_local constant i32 2222
@K = dso_local constant i32 -24
@a_3 = dso_local constant [2 x i32] [i32 4, i32 5]
@a_4 = dso_local constant [2 x [2 x i32]] [[2 x i32] [i32 899, i32 99], [2 x i32] [i32 1222, i32 25555]]
@a_1 = dso_local constant [2 x i32] [i32 1, i32 2]
@a_2 = dso_local constant [1 x [1 x i32]] [[1 x i32] [i32 2]]
@a = dso_local global [510 x i32] zeroinitializer
@b = dso_local global [510 x [510 x i32]] zeroinitializer
@n = dso_local global i32 0
@m = dso_local global i32 0
@xxxx = dso_local global i32 0
@yyyy = dso_local global i32 0
@t = dso_local global i32 1234
@u = dso_local global i32 2345
@d = dso_local global [2 x [2 x i32]] [[2 x i32] [i32 4, i32 -2], [2 x i32] [i32 15, i32 6]]
@tmp_0 = dso_local global [5 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4]
@hs_new_global_str_0 = dso_local constant [6 x i8] c"YeG1\0a\00"
@hs_new_global_str_1 = dso_local constant [6 x i8] c"YeG2\0a\00"
@hs_new_global_str_2 = dso_local constant [6 x i8] c"YeG3\0a\00"
@hs_new_global_str_3 = dso_local constant [6 x i8] c"YeG4\0a\00"
@hs_new_global_str_4 = dso_local constant [6 x i8] c"YeG5\0a\00"
@hs_new_global_str_5 = dso_local constant [5 x i8] c" -- \00"
define dso_local void @pr() {
0:
	ret void
}
define dso_local void @nonsense() {
0:
	ret void
}
define dso_local void @matrix() {
0:
	%1 = alloca [2 x [4 x i32]]
	%2 = getelementptr [2 x [4 x i32]], [2 x [4 x i32]]* %1, i32 0, i32 0, i32 0
	store i32 -1, i32* %2
	%3 = getelementptr [2 x [4 x i32]], [2 x [4 x i32]]* %1, i32 0, i32 0, i32 1
	store i32 8, i32* %3
	%4 = getelementptr [2 x [4 x i32]], [2 x [4 x i32]]* %1, i32 0, i32 0, i32 2
	store i32 -8, i32* %4
	%5 = getelementptr [2 x [4 x i32]], [2 x [4 x i32]]* %1, i32 0, i32 0, i32 3
	store i32 24, i32* %5
	%6 = getelementptr [2 x [4 x i32]], [2 x [4 x i32]]* %1, i32 0, i32 1, i32 0
	store i32 -1, i32* %6
	%7 = getelementptr [2 x [4 x i32]], [2 x [4 x i32]]* %1, i32 0, i32 1, i32 1
	store i32 -8, i32* %7
	%8 = getelementptr [2 x [4 x i32]], [2 x [4 x i32]]* %1, i32 0, i32 1, i32 2
	store i32 1, i32* %8
	%9 = getelementptr [2 x [4 x i32]], [2 x [4 x i32]]* %1, i32 0, i32 1, i32 3
	store i32 2, i32* %9
	%10 = alloca [3 x i32]
	%11 = getelementptr [3 x i32], [3 x i32]* %10, i32 0, i32 0
	store i32 1, i32* %11
	%12 = getelementptr [3 x i32], [3 x i32]* %10, i32 0, i32 1
	store i32 -2, i32* %12
	%13 = getelementptr [3 x i32], [3 x i32]* %10, i32 0, i32 2
	store i32 3, i32* %13
	%14 = getelementptr [5 x i32], [5 x i32]* @tmp_0, i32 0, i32 0
	store i32 26, i32* %14
	store i32 33, i32* %2
	ret void
}
define dso_local void @logic() {
0:
	%1 = icmp sle i32 0, 0
	br i1 %1, label %2, label %mid61
2:
	move %4 <- 0
	br label %3
mid61:
	move %4 <- 0
	br label %3
3:
	%5 = icmp sge i32 %4, 0
	br i1 %5, label %6, label %mid62
6:
	move %8 <- 0
	br label %7
mid62:
	move %8 <- %4
	br label %7
7:
	%9 = icmp slt i32 %8, 100
	br i1 %9, label %10, label %13
10:
	%11 = icmp sgt i32 0, 100
	br i1 %11, label %12, label %13
12:
	br label %13
13:
	%14 = icmp eq i32 %8, 0
	br i1 %14, label %15, label %18
15:
	%16 = icmp ne i32 0, 0
	br i1 %16, label %17, label %18
17:
	br label %18
18:
	br i1 %14, label %19, label %23
19:
	%20 = icmp eq i32 0, 0
	br i1 %20, label %21, label %23
21:
	%22 = getelementptr inbounds [6 x i8], [6 x i8]* @hs_new_global_str_0, i32 0, i32 0
	call void @putstr(i8* %22)
	br label %23
23:
	%24 = icmp eq i32 0, %8
	br i1 %24, label %27, label %25
25:
	%26 = icmp ne i32 0, 0
	br i1 %26, label %27, label %29
27:
	%28 = getelementptr inbounds [6 x i8], [6 x i8]* @hs_new_global_str_1, i32 0, i32 0
	call void @putstr(i8* %28)
	br label %29
29:
	%30 = icmp ne i32 %8, 0
	br i1 %30, label %33, label %31
31:
	%32 = icmp eq i32 0, 0
	br i1 %32, label %33, label %35
33:
	%34 = getelementptr inbounds [6 x i8], [6 x i8]* @hs_new_global_str_2, i32 0, i32 0
	call void @putstr(i8* %34)
	br label %35
35:
	br i1 %24, label %38, label %36
36:
	%37 = icmp eq i32 0, 0
	br i1 %37, label %38, label %40
38:
	%39 = getelementptr inbounds [6 x i8], [6 x i8]* @hs_new_global_str_3, i32 0, i32 0
	call void @putstr(i8* %39)
	br label %40
40:
	br i1 %24, label %41, label %45
41:
	%42 = icmp eq i32 0, 0
	br i1 %42, label %43, label %45
43:
	%44 = getelementptr inbounds [6 x i8], [6 x i8]* @hs_new_global_str_4, i32 0, i32 0
	call void @putstr(i8* %44)
	br label %45
45:
	%47 = icmp ne i1 %24, 0
	br i1 %47, label %48, label %mid63
48:
	move %50 <- 0
	br label %49
mid63:
	move %50 <- %8
	br label %49
49:
	%51 = icmp eq i32 0, 0
	%53 = icmp ne i32 %50, %51
	br i1 %53, label %54, label %55
54:
	br label %56
55:
	br label %56
56:
	ret void
}
define dso_local i32 @getInt() {
0:
	%1 = call i32 @getint() 
	ret i32 %1
}
define dso_local void @prd([2 x i32]* %0, i32 %1, i32* %2) {
3:
	%4 = alloca [2 x i32]*
	store [2 x i32]* %0, [2 x i32]** %4
	%5 = alloca i32*
	store i32* %2, i32** %5
	move %7 <- 0
	move %8 <- 0
	br label %6
6:
	%9 = icmp sge i32 %8, 0
	br i1 %9, label %10, label %25
10:
	%11 = load [2 x i32]*, [2 x i32]** %4
	%12 = getelementptr [2 x i32], [2 x i32]* %11, i32 %8, i32 %7
	%13 = load i32, i32* %12
	call void @putint(i32 %13)
	call void @putch(i32 10)
	%14 = add i32 %7, 1
	%15 = icmp eq i32 %14, 2
	br i1 %15, label %16, label %mid64
16:
	%17 = add i32 %8, 1
	move %19 <- 0
	move %20 <- %17
	br label %18
mid64:
	move %19 <- %14
	move %20 <- %8
	br label %18
18:
	%21 = icmp eq i32 %20, 2
	br i1 %21, label %22, label %23
22:
	br label %25
23:
	br label %24
24:
	move %7 <- %19
	move %8 <- %20
	br label %6
25:
	ret void
}
define dso_local void @f1(i32 %0) {
1:
	call void @putint(i32 %0)
	ret void
}
define dso_local void @f2([2 x i32]* %0) {
1:
	%2 = alloca [2 x i32]*
	store [2 x i32]* %0, [2 x i32]** %2
	%3 = load [2 x i32]*, [2 x i32]** %2
	%4 = getelementptr [2 x i32], [2 x i32]* %3, i32 0, i32 1
	store i32 10000, i32* %4
	ret void
}
define dso_local void @f3(i32 %0) {
1:
	ret void
}
define dso_local void @f4(i32* %0) {
1:
	%2 = alloca i32*
	store i32* %0, i32** %2
	ret void
}
define dso_local void @f5(i32 %0, i32* %1) {
2:
	%3 = alloca i32*
	store i32* %1, i32** %3
	ret void
}
define dso_local i32 @main() {
0:
	call void @pr()
	call void @nonsense()
	%1 = call i32 @getInt() 
	store i32 %1, i32* @n
	%2 = call i32 @getInt() 
	store i32 %2, i32* @m
	call void @matrix()
	%3 = load i32, i32* @n
	call void @f1(i32 %3)
	%4 = getelementptr [2 x [2 x i32]], [2 x [2 x i32]]* @d, i32 0, i32 0
	call void @f2([2 x i32]* %4)
	%5 = load i32, i32* @n
	%6 = load i32, i32* @m
	%7 = add i32 %5, %6
	call void @f3(i32 %7)
	%8 = getelementptr [5 x i32], [5 x i32]* @tmp_0, i32 0, i32 0
	%9 = load i32, i32* %8
	%10 = getelementptr [5 x i32], [5 x i32]* @tmp_0, i32 0, i32 1
	%11 = load i32, i32* %10
	%12 = add i32 %9, %11
	call void @f3(i32 %12)
	%13 = getelementptr [1 x [1 x i32]], [1 x [1 x i32]]* @a_2, i32 0, i32 0, i32 0
	%14 = load i32, i32* %13
	%15 = load i32, i32* %13
	%16 = add i32 %14, %15
	call void @f3(i32 %16)
	%17 = load i32, i32* %13
	%18 = load i32, i32* %8
	%19 = mul i32 %17, %18
	call void @f3(i32 %19)
	%20 = load i32, i32* %8
	%21 = load i32, i32* @n
	%22 = add i32 %20, %21
	call void @f3(i32 %22)
	%23 = load i32, i32* %13
	%24 = load i32, i32* @m
	%25 = add i32 %23, %24
	call void @f3(i32 %25)
	%26 = getelementptr [2 x [2 x i32]], [2 x [2 x i32]]* @d, i32 0, i32 1
	%27 = getelementptr [2 x i32], [2 x i32]* %26, i32 0, i32 0
	call void @f4(i32* %27)
	%28 = load i32, i32* %8
	%29 = getelementptr [2 x i32], [2 x i32]* %4, i32 0, i32 0
	call void @f5(i32 %28,i32* %29)
	%30 = load i32, i32* @n
	call void @f5(i32 %30,i32* %8)
	call void @logic()
	%31 = load i32, i32* @m
	%32 = icmp eq i32 0, %31
	br i1 %32, label %33, label %34
33:
	move %41 <- 1
	br label %40
34:
	%35 = icmp sle i32 0, %31
	br i1 %35, label %36, label %37
36:
	move %39 <- 1
	br label %38
37:
	move %39 <- 2
	br label %38
38:
	move %41 <- %39
	br label %40
40:
	%42 = icmp eq i32 0, %41
	br i1 %42, label %43, label %44
43:
	br label %45
44:
	br label %45
45:
	%46 = load i32, i32* @n
	call void @putint(i32 %46)
	%47 = getelementptr inbounds [5 x i8], [5 x i8]* @hs_new_global_str_5, i32 0, i32 0
	call void @putstr(i8* %47)
	%48 = load i32, i32* @m
	call void @putint(i32 %48)
	call void @putch(i32 10)
	call void @prd([2 x i32]* %4,i32 100,i32* %8)
	%49 = load i32, i32* @n
	%50 = load i32, i32* @m
	%51 = add i32 %49, %50
	call void @putint(i32 %51)
	call void @putch(i32 10)
	%52 = load i32, i32* @n
	%53 = load i32, i32* @m
	%54 = sub i32 %52, %53
	call void @putint(i32 %54)
	call void @putch(i32 10)
	%55 = load i32, i32* @n
	%56 = load i32, i32* @m
	%57 = mul i32 %55, %56
	call void @putint(i32 %57)
	call void @putch(i32 10)
	%58 = load i32, i32* @n
	%59 = load i32, i32* @m
	%60 = srem i32 %58, %59
	call void @putint(i32 %60)
	call void @putch(i32 10)
	ret i32 0
}
