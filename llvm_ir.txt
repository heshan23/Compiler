declare i32 @getint()
declare void @putint(i32)
declare void @putch(i32)
declare void @putstr(i8*)
@_a = dso_local constant i32 5
@_12 = dso_local constant i32 85
@a = dso_local constant i32 8
@arrayA = dso_local constant [2 x i32] [i32 1, i32 2]
@array_b = dso_local constant [2 x [1 x i32]] [[1 x i32] [i32 1], [1 x i32] [i32 1]]
@array_c = dso_local global [2 x i32] [i32 1, i32 2]
@array_d = dso_local global [2 x [1 x i32]] [[1 x i32] [i32 1], [1 x i32] [i32 2]]
@b = dso_local global i32 12
@c_1 = dso_local global i32 0
@d = dso_local global i32 30
define dso_local i32 @func1(i32 %0) {
1:
	%2 = alloca i32
	store i32 %0, i32* %2
	ret i32 1
}
define dso_local void @func2() {
0:
	ret void
}
define dso_local void @_func1() {
0:
	%1 = alloca i32
	store i32 10, i32* %1
	%2 = alloca i32
	store i32 12, i32* %2
	%3 = getelementptr [2 x i32], [2 x i32]* @array_c, i32 0, i32 1
	%4 = load i32, i32* %3
	%5 = alloca [2 x [1 x i32]]
	%6 = getelementptr [2 x [1 x i32]], [2 x [1 x i32]]* %5, i32 0, i32 0, i32 0
	store i32 1, i32* %6
	%7 = getelementptr [2 x [1 x i32]], [2 x [1 x i32]]* %5, i32 0, i32 1, i32 0
	store i32 %4, i32* %7
	%8 = mul i32 1, 20
	%9 = sdiv i32 %8, 2
	%10 = load i32, i32* %1
	%11 = mul i32 %9, %10
	%12 = add i32 3, %11
	%13 = alloca i32
	store i32 %12, i32* %13
	%14 = alloca i32
	store i32 121, i32* %14
	%15 = alloca i32
	%16 = load i32, i32* %1
	%17 = load i32, i32* %1
	%18 = mul i32 %16, %17
	%19 = load i32, i32* %1
	%20 = add i32 %18, %19
	%21 = getelementptr [2 x i32], [2 x i32]* @arrayA, i32 0, i32 0
	%22 = load i32, i32* %21
	%23 = add i32 %20, %22
	%24 = alloca i32
	store i32 %23, i32* %24
	call void @putch(i32 95)
	call void @putch(i32 97)
	call void @putch(i32 61)
	%25 = load i32, i32* %1
	call void @putint(i32 %25)
	call void @putch(i32 10)
	call void @putch(i32 95)
	call void @putch(i32 97)
	call void @putch(i32 61)
	%26 = load i32, i32* %13
	call void @putint(i32 %26)
	call void @putch(i32 10)
	%27 = load i32, i32* %13
	%28 = icmp eq i32 %27, 0
	br i1 %28, label %29, label %33
29:
	%30 = load i32, i32* %13
	%31 = sub i32 0, 1
	%32 = add i32 %30, %31
	store i32 %32, i32* %13
	br label %34
33:
	store i32 1, i32* %13
	br label %34
34:
	br label %35
35:
	%36 = load i32, i32* %13
	%37 = icmp slt i32 %36, 10
	br i1 %37, label %38, label %78
38:
	%39 = load i32, i32* %13
	%40 = icmp sgt i32 %39, 0
	br i1 %40, label %41, label %78
41:
	%42 = load i32, i32* %13
	%43 = add i32 %42, 1
	store i32 %43, i32* %13
	%44 = load i32, i32* %13
	%45 = icmp eq i32 %44, 5
	br i1 %45, label %72, label %46
46:
	%47 = load i32, i32* %13
	%48 = icmp eq i32 %47, 6
	br i1 %48, label %49, label %73
49:
	%50 = load i32, i32* %13
	%51 = mul i32 5, 1
	%52 = srem i32 %51, 5
	%53 = icmp ne i32 %50, %52
	br i1 %53, label %54, label %73
54:
	%55 = load i32, i32* %13
	%56 = icmp slt i32 %55, 10
	br i1 %56, label %57, label %73
57:
	%58 = load i32, i32* %13
	%59 = icmp sgt i32 %58, 5
	br i1 %59, label %60, label %73
60:
	%61 = load i32, i32* %13
	%62 = icmp sge i32 %61, 5
	br i1 %62, label %63, label %73
63:
	%64 = load i32, i32* %13
	%65 = icmp sle i32 %64, 6
	br i1 %65, label %66, label %73
66:
	%67 = sub i32 1, 1
	%68 = icmp eq i32 0, %67
	br i1 %68, label %69, label %73
69:
	%70 = load i32, i32* %13
	%71 = icmp ne i32 %70, 0
	br i1 %71, label %72, label %73
72:
	br label %78
73:
	br label %74
74:
	%75 = load i32, i32* %13
	%76 = add i32 %75, 1
	store i32 %76, i32* %13
	br label %77
77:
	br label %35
78:
	br label %79
79:
	%80 = load i32, i32* %13
	%81 = icmp slt i32 %80, 10
	br i1 %81, label %82, label %90
82:
	%83 = load i32, i32* %13
	%84 = add i32 %83, 1
	store i32 %84, i32* %13
	%85 = load i32, i32* %13
	%86 = icmp eq i32 %85, 5
	br i1 %86, label %87, label %88
87:
	br label %89
88:
	br label %89
89:
	br label %79
90:
	%91 = load i32, i32* %1
	%92 = add i32 %91, 1
	%93 = load i32, i32* %1
	%94 = srem i32 %93, 2
	store i32 %94, i32* %14
	ret void
}
define dso_local i32 @main() {
0:
	%1 = alloca i32
	%2 = call i32 @getint() 
	store i32 %2, i32* %1
	call void @putch(i32 119)
	call void @putch(i32 104)
	call void @putch(i32 97)
	call void @putch(i32 116)
	call void @putch(i32 32)
	call void @putch(i32 121)
	call void @putch(i32 111)
	call void @putch(i32 117)
	call void @putch(i32 32)
	call void @putch(i32 101)
	call void @putch(i32 110)
	call void @putch(i32 116)
	call void @putch(i32 101)
	call void @putch(i32 114)
	call void @putch(i32 32)
	call void @putch(i32 105)
	call void @putch(i32 110)
	call void @putch(i32 32)
	call void @putch(i32 105)
	call void @putch(i32 115)
	call void @putch(i32 58)
	%3 = load i32, i32* %1
	call void @putint(i32 %3)
	call void @putch(i32 10)
	call void @putch(i32 95)
	call void @putch(i32 97)
	call void @putch(i32 61)
	%4 = load i32, i32* @_a
	call void @putint(i32 %4)
	call void @putch(i32 10)
	call void @putch(i32 97)
	call void @putch(i32 114)
	call void @putch(i32 114)
	call void @putch(i32 97)
	call void @putch(i32 121)
	call void @putch(i32 95)
	call void @putch(i32 99)
	call void @putch(i32 91)
	call void @putch(i32 48)
	call void @putch(i32 93)
	call void @putch(i32 32)
	call void @putch(i32 105)
	call void @putch(i32 115)
	call void @putch(i32 58)
	%5 = getelementptr [2 x i32], [2 x i32]* @array_c, i32 0, i32 0
	%6 = load i32, i32* %5
	call void @putint(i32 %6)
	call void @putch(i32 10)
	call void @putch(i32 97)
	call void @putch(i32 114)
	call void @putch(i32 114)
	call void @putch(i32 97)
	call void @putch(i32 121)
	call void @putch(i32 95)
	call void @putch(i32 100)
	call void @putch(i32 91)
	call void @putch(i32 48)
	call void @putch(i32 93)
	call void @putch(i32 91)
	call void @putch(i32 48)
	call void @putch(i32 93)
	call void @putch(i32 32)
	call void @putch(i32 105)
	call void @putch(i32 115)
	call void @putch(i32 58)
	%7 = getelementptr [2 x [1 x i32]], [2 x [1 x i32]]* @array_d, i32 0, i32 0, i32 0
	%8 = load i32, i32* %7
	call void @putint(i32 %8)
	call void @putch(i32 10)
	call void @putch(i32 97)
	call void @putch(i32 114)
	call void @putch(i32 114)
	call void @putch(i32 97)
	call void @putch(i32 121)
	call void @putch(i32 95)
	call void @putch(i32 100)
	call void @putch(i32 91)
	call void @putch(i32 49)
	call void @putch(i32 93)
	call void @putch(i32 91)
	call void @putch(i32 48)
	call void @putch(i32 93)
	call void @putch(i32 32)
	call void @putch(i32 105)
	call void @putch(i32 115)
	call void @putch(i32 58)
	%9 = getelementptr [2 x [1 x i32]], [2 x [1 x i32]]* @array_d, i32 0, i32 1, i32 0
	%10 = load i32, i32* %9
	call void @putint(i32 %10)
	call void @putch(i32 10)
	call void @_func1()
	%11 = alloca i32
	store i32 2, i32* %11
	%12 = alloca i32
	br label %13
13:
	%14 = load i32, i32* %11
	%15 = load i32, i32* %1
	%16 = icmp slt i32 %14, %15
	br i1 %16, label %17, label %33
17:
	%18 = load i32, i32* %1
	%19 = load i32, i32* %11
	%20 = srem i32 %18, %19
	store i32 %20, i32* %12
	%21 = load i32, i32* %12
	%22 = icmp eq i32 %21, 0
	br i1 %22, label %23, label %28
23:
	%24 = load i32, i32* %1
	%25 = load i32, i32* %11
	%26 = sdiv i32 %24, %25
	store i32 %26, i32* %1
	%27 = load i32, i32* %11
	call void @putint(i32 %27)
	call void @putch(i32 32)
	br label %31
28:
	%29 = load i32, i32* %11
	%30 = add i32 %29, 1
	store i32 %30, i32* %11
	br label %31
31:
	br label %32
32:
	br label %13
33:
	%34 = load i32, i32* %1
	call void @putint(i32 %34)
	call void @putch(i32 10)
	call void @putch(i32 79)
	call void @putch(i32 118)
	call void @putch(i32 101)
	call void @putch(i32 114)
	ret i32 0
}
