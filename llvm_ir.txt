declare i32 @getint()
declare void @putint(i32)
declare void @putch(i32)
declare void @putstr(i8*)
@N = dso_local constant i32 510
@M = dso_local constant i32 -520
@KK = dso_local constant i32 -1
@NN = dso_local constant i32 55
@MM = dso_local constant i32 2222
@K = dso_local constant i32 -24
@a_3 = dso_local constant [2 x i32] [i32 4, i32 5]
@a_4 = dso_local constant [2 x [2 x i32]] [[2 x i32] [i32 899, i32 99], [2 x i32] [i32 1222, i32 25555]]
@a_1 = dso_local constant [2 x i32] [i32 1, i32 2]
@a_2 = dso_local constant [1 x [1 x i32]] [[1 x i32] [i32 2]]
@a = dso_local global [510 x i32] zeroinitializer
@b = dso_local global [510 x [510 x i32]] zeroinitializer
@n = dso_local global i32 0
@m = dso_local global i32 0
@xxxx = dso_local global i32 0
@yyyy = dso_local global i32 0
@t = dso_local global i32 1234
@u = dso_local global i32 2345
@d = dso_local global [2 x [2 x i32]] [[2 x i32] [i32 4, i32 -2], [2 x i32] [i32 15, i32 6]]
@tmp_0 = dso_local global [5 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4]
define dso_local void @pr() {
0:
	ret void
}
define dso_local void @nonsense() {
0:
	ret void
}
define dso_local void @matrix() {
0:
	%1 = sub i32 0, 1
	%2 = add i32 %1, 2
	%3 = mul i32 3, 4
	%4 = sdiv i32 %3, 5
	%5 = srem i32 %4, 6
	%6 = sub i32 %2, %5
	%7 = sub i32 0, 1
	%8 = add i32 %7, 2
	%9 = add i32 %8, 3
	%10 = add i32 %9, 4
	%11 = sub i32 1, 2
	%12 = sub i32 %11, 3
	%13 = sub i32 %12, 4
	%14 = mul i32 1, 2
	%15 = mul i32 %14, 3
	%16 = mul i32 %15, 4
	%17 = sdiv i32 100, 10
	%18 = sdiv i32 %17, 10
	%19 = sub i32 0, 1
	%20 = mul i32 %18, %19
	%21 = sub i32 1, 2
	%22 = add i32 3, 5
	%23 = mul i32 %21, %22
	%24 = alloca [2 x [4 x i32]]
	%25 = getelementptr [2 x [4 x i32]], [2 x [4 x i32]]* %24, i32 0, i32 1, i32 2
	store i32 1, i32* %25
	%26 = getelementptr [2 x [4 x i32]], [2 x [4 x i32]]* %24, i32 0, i32 1, i32 3
	store i32 2, i32* %26
	%27 = sub i32 0, 2
	%28 = alloca [3 x i32]
	%29 = getelementptr [3 x i32], [3 x i32]* %28, i32 0, i32 0
	store i32 1, i32* %29
	%30 = getelementptr [3 x i32], [3 x i32]* %28, i32 0, i32 2
	store i32 3, i32* %30
	%31 = alloca [2 x [2 x i32]]
	%32 = load i32, i32* @t
	%33 = load i32, i32* @u
	%34 = add i32 %32, %33
	%35 = alloca i32
	store i32 %34, i32* %35
	%36 = load i32, i32* @t
	%37 = load i32, i32* @u
	%38 = mul i32 %36, %37
	store i32 %38, i32* %35
	%39 = mul i32 5, 5
	%40 = add i32 %39, 1
	%41 = getelementptr [5 x i32], [5 x i32]* @tmp_0, i32 0, i32 0
	store i32 %40, i32* %41
	%42 = srem i32 134, 100
	%43 = sub i32 0, 1
	%44 = add i32 %42, %43
	%45 = getelementptr [2 x [4 x i32]], [2 x [4 x i32]]* %24, i32 0, i32 0, i32 0
	store i32 %44, i32* %45
	ret void
}
define dso_local void @logic() {
0:
	%1 = alloca i32
	store i32 0, i32* %1
	%2 = alloca i32
	store i32 0, i32* %2
	%3 = load i32, i32* %1
	%4 = load i32, i32* %2
	%5 = icmp sle i32 %3, %4
	br i1 %5, label %6, label %8
6:
	%7 = load i32, i32* %2
	store i32 %7, i32* %1
	br label %8
8:
	%9 = load i32, i32* %1
	%10 = load i32, i32* %2
	%11 = icmp sge i32 %9, %10
	br i1 %11, label %12, label %14
12:
	%13 = load i32, i32* %2
	store i32 %13, i32* %1
	br label %14
14:
	%15 = load i32, i32* %1
	%16 = icmp slt i32 %15, 100
	br i1 %16, label %17, label %21
17:
	%18 = load i32, i32* %2
	%19 = icmp sgt i32 %18, 100
	br i1 %19, label %20, label %21
20:
	br label %21
21:
	%22 = load i32, i32* %1
	%23 = icmp eq i32 %22, 0
	br i1 %23, label %24, label %28
24:
	%25 = load i32, i32* %2
	%26 = icmp ne i32 %25, 0
	br i1 %26, label %27, label %28
27:
	br label %28
28:
	%29 = load i32, i32* %1
	%30 = icmp eq i32 %29, 0
	br i1 %30, label %31, label %35
31:
	%32 = load i32, i32* %2
	%33 = icmp eq i32 0, %32
	br i1 %33, label %34, label %35
34:
	call void @putch(i32 89)
	call void @putch(i32 101)
	call void @putch(i32 71)
	call void @putch(i32 49)
	call void @putch(i32 10)
	br label %35
35:
	%36 = load i32, i32* %1
	%37 = icmp eq i32 0, %36
	br i1 %37, label %41, label %38
38:
	%39 = load i32, i32* %2
	%40 = icmp ne i32 %39, 0
	br i1 %40, label %41, label %42
41:
	call void @putch(i32 89)
	call void @putch(i32 101)
	call void @putch(i32 71)
	call void @putch(i32 50)
	call void @putch(i32 10)
	br label %42
42:
	%43 = load i32, i32* %1
	%44 = icmp ne i32 %43, 0
	br i1 %44, label %48, label %45
45:
	%46 = load i32, i32* %2
	%47 = icmp eq i32 0, %46
	br i1 %47, label %48, label %49
48:
	call void @putch(i32 89)
	call void @putch(i32 101)
	call void @putch(i32 71)
	call void @putch(i32 51)
	call void @putch(i32 10)
	br label %49
49:
	%50 = load i32, i32* %1
	%51 = icmp eq i32 0, %50
	br i1 %51, label %55, label %52
52:
	%53 = load i32, i32* %2
	%54 = icmp eq i32 0, %53
	br i1 %54, label %55, label %56
55:
	call void @putch(i32 89)
	call void @putch(i32 101)
	call void @putch(i32 71)
	call void @putch(i32 52)
	call void @putch(i32 10)
	br label %56
56:
	%57 = load i32, i32* %1
	%58 = icmp eq i32 0, %57
	br i1 %58, label %59, label %63
59:
	%60 = load i32, i32* %2
	%61 = icmp eq i32 0, %60
	br i1 %61, label %62, label %63
62:
	call void @putch(i32 89)
	call void @putch(i32 101)
	call void @putch(i32 71)
	call void @putch(i32 53)
	call void @putch(i32 10)
	br label %63
63:
	%64 = load i32, i32* %1
	%65 = icmp eq i32 0, %64
	%66 = load i32, i32* %2
	%67 = zext i1 %65 to i32
	%68 = icmp ne i32 %67, %66
	br i1 %68, label %69, label %71
69:
	%70 = load i32, i32* %2
	store i32 %70, i32* %1
	br label %71
71:
	%72 = load i32, i32* %1
	%73 = load i32, i32* %2
	%74 = icmp eq i32 0, %73
	%75 = zext i1 %74 to i32
	%76 = icmp ne i32 %72, %75
	br i1 %76, label %77, label %79
77:
	%78 = load i32, i32* %1
	store i32 %78, i32* %2
	br label %89
79:
	%80 = load i32, i32* %1
	%81 = load i32, i32* %1
	%82 = sub i32 0, %81
	%83 = mul i32 %82, 100
	%84 = sdiv i32 %83, 10
	%85 = srem i32 %84, 10
	%86 = sub i32 0, 1
	%87 = mul i32 %85, %86
	%88 = sub i32 %80, %87
	store i32 %88, i32* %2
	br label %89
89:
	ret void
}
define dso_local i32 @getInt() {
0:
	%1 = alloca i32
	%2 = call i32 @getint() 
	store i32 %2, i32* %1
	%3 = load i32, i32* %1
	ret i32 %3
}
define dso_local void @prd([2 x i32]* %0, i32 %1, i32* %2) {
3:
	%4 = alloca [2 x i32]*
	store [2 x i32]* %0, [2 x i32]** %4
	%5 = alloca i32
	store i32 %1, i32* %5
	%6 = alloca i32*
	store i32* %2, i32** %6
	%7 = alloca i32
	store i32 0, i32* %7
	%8 = alloca i32
	store i32 0, i32* %8
	br label %9
9:
	%10 = load i32, i32* %7
	%11 = icmp sge i32 %10, 0
	br i1 %11, label %12, label %32
12:
	%13 = load [2 x i32]*, [2 x i32]** %4
	%14 = load i32, i32* %7
	%15 = load i32, i32* %8
	%16 = getelementptr [2 x i32], [2 x i32]* %13, i32 %14, i32 %15
	%17 = load i32, i32* %16
	call void @putint(i32 %17)
	call void @putch(i32 10)
	%18 = load i32, i32* %8
	%19 = add i32 %18, 1
	store i32 %19, i32* %8
	%20 = load i32, i32* %8
	%21 = icmp eq i32 %20, 2
	br i1 %21, label %22, label %25
22:
	store i32 0, i32* %8
	%23 = load i32, i32* %7
	%24 = add i32 %23, 1
	store i32 %24, i32* %7
	br label %25
25:
	%26 = load i32, i32* %7
	%27 = icmp eq i32 %26, 2
	br i1 %27, label %28, label %29
28:
	br label %32
29:
	br label %31
30:
	br label %31
31:
	br label %9
32:
	ret void
}
define dso_local void @f1(i32 %0) {
1:
	%2 = alloca i32
	store i32 %0, i32* %2
	%3 = load i32, i32* %2
	call void @putint(i32 %3)
	ret void
}
define dso_local void @f2([2 x i32]* %0) {
1:
	%2 = alloca [2 x i32]*
	store [2 x i32]* %0, [2 x i32]** %2
	%3 = load [2 x i32]*, [2 x i32]** %2
	%4 = getelementptr [2 x i32], [2 x i32]* %3, i32 0, i32 1
	store i32 10000, i32* %4
	ret void
}
define dso_local void @f3(i32 %0) {
1:
	%2 = alloca i32
	store i32 %0, i32* %2
	ret void
}
define dso_local void @f4(i32* %0) {
1:
	%2 = alloca i32*
	store i32* %0, i32** %2
	ret void
}
define dso_local void @f5(i32 %0, i32* %1) {
2:
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32*
	store i32* %1, i32** %4
	ret void
}
define dso_local i32 @main() {
0:
	call void @pr()
	call void @nonsense()
	%1 = call i32 @getInt() 
	store i32 %1, i32* @n
	%2 = call i32 @getInt() 
	store i32 %2, i32* @m
	call void @matrix()
	%3 = load i32, i32* @n
	call void @f1(i32 %3)
	%4 = getelementptr [2 x [2 x i32]], [2 x [2 x i32]]* @d, i32 0, i32 0
	call void @f2([2 x i32]* %4)
	%5 = load i32, i32* @n
	%6 = load i32, i32* @m
	%7 = add i32 %5, %6
	call void @f3(i32 %7)
	%8 = getelementptr [5 x i32], [5 x i32]* @tmp_0, i32 0, i32 0
	%9 = load i32, i32* %8
	%10 = getelementptr [5 x i32], [5 x i32]* @tmp_0, i32 0, i32 1
	%11 = load i32, i32* %10
	%12 = add i32 %9, %11
	call void @f3(i32 %12)
	%13 = getelementptr [1 x [1 x i32]], [1 x [1 x i32]]* @a_2, i32 0, i32 0, i32 0
	%14 = load i32, i32* %13
	%15 = getelementptr [1 x [1 x i32]], [1 x [1 x i32]]* @a_2, i32 0, i32 0, i32 0
	%16 = load i32, i32* %15
	%17 = add i32 %14, %16
	call void @f3(i32 %17)
	%18 = getelementptr [1 x [1 x i32]], [1 x [1 x i32]]* @a_2, i32 0, i32 0, i32 0
	%19 = load i32, i32* %18
	%20 = getelementptr [5 x i32], [5 x i32]* @tmp_0, i32 0, i32 0
	%21 = load i32, i32* %20
	%22 = mul i32 %19, %21
	call void @f3(i32 %22)
	%23 = getelementptr [5 x i32], [5 x i32]* @tmp_0, i32 0, i32 0
	%24 = load i32, i32* %23
	%25 = load i32, i32* @n
	%26 = add i32 %24, %25
	call void @f3(i32 %26)
	%27 = getelementptr [1 x [1 x i32]], [1 x [1 x i32]]* @a_2, i32 0, i32 0, i32 0
	%28 = load i32, i32* %27
	%29 = load i32, i32* @m
	%30 = add i32 %28, %29
	call void @f3(i32 %30)
	%31 = getelementptr [2 x [2 x i32]], [2 x [2 x i32]]* @d, i32 0, i32 1
	%32 = getelementptr [2 x i32], [2 x i32]* %31, i32 0, i32 0
	call void @f4(i32* %32)
	%33 = getelementptr [5 x i32], [5 x i32]* @tmp_0, i32 0, i32 0
	%34 = load i32, i32* %33
	%35 = getelementptr [2 x [2 x i32]], [2 x [2 x i32]]* @d, i32 0, i32 0
	%36 = getelementptr [2 x i32], [2 x i32]* %35, i32 0, i32 0
	call void @f5(i32 %34,i32* %36)
	%37 = load i32, i32* @n
	%38 = getelementptr [5 x i32], [5 x i32]* @tmp_0, i32 0, i32 0
	call void @f5(i32 %37,i32* %38)
	call void @logic()
	%39 = load i32, i32* @n
	%40 = alloca i32
	store i32 %39, i32* %40
	%41 = load i32, i32* @m
	%42 = alloca i32
	store i32 %41, i32* %42
	%43 = load i32, i32* %40
	%44 = load i32, i32* %40
	%45 = sub i32 0, %44
	%46 = add i32 %43, %45
	store i32 %46, i32* %40
	%47 = load i32, i32* %42
	%48 = load i32, i32* %40
	%49 = sub i32 0, %48
	%50 = sub i32 %47, %49
	store i32 %50, i32* %42
	%51 = load i32, i32* %40
	%52 = load i32, i32* %42
	%53 = icmp eq i32 %51, %52
	br i1 %53, label %54, label %55
54:
	store i32 1, i32* %40
	store i32 1, i32* %42
	br label %62
55:
	%56 = load i32, i32* %40
	%57 = load i32, i32* %42
	%58 = icmp sle i32 %56, %57
	br i1 %58, label %59, label %60
59:
	store i32 1, i32* %40
	store i32 2, i32* %42
	br label %61
60:
	store i32 2, i32* %40
	store i32 1, i32* %42
	br label %61
61:
	br label %62
62:
	%63 = load i32, i32* %40
	%64 = icmp eq i32 0, %63
	br i1 %64, label %65, label %66
65:
	store i32 10000, i32* %40
	br label %67
66:
	br label %67
67:
	%68 = load i32, i32* @n
	call void @putint(i32 %68)
	call void @putch(i32 32)
	call void @putch(i32 45)
	call void @putch(i32 45)
	call void @putch(i32 32)
	%69 = load i32, i32* @m
	call void @putint(i32 %69)
	call void @putch(i32 10)
	%70 = getelementptr [2 x [2 x i32]], [2 x [2 x i32]]* @d, i32 0, i32 0
	%71 = getelementptr [5 x i32], [5 x i32]* @tmp_0, i32 0, i32 0
	call void @prd([2 x i32]* %70,i32 100,i32* %71)
	%72 = load i32, i32* @n
	%73 = load i32, i32* @m
	%74 = add i32 %72, %73
	call void @putint(i32 %74)
	call void @putch(i32 10)
	%75 = load i32, i32* @n
	%76 = load i32, i32* @m
	%77 = sub i32 %75, %76
	call void @putint(i32 %77)
	call void @putch(i32 10)
	%78 = load i32, i32* @n
	%79 = load i32, i32* @m
	%80 = mul i32 %78, %79
	call void @putint(i32 %80)
	call void @putch(i32 10)
	%81 = load i32, i32* @n
	%82 = load i32, i32* @m
	%83 = srem i32 %81, %82
	call void @putint(i32 %83)
	call void @putch(i32 10)
	ret i32 0
}
