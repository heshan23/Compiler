declare i32 @getint()
declare void @putint(i32)
declare void @putch(i32)
declare void @putstr(i8*)
@N = dso_local constant i32 123
@ARR = dso_local constant [3 x i32] [i32 1, i32 2, i32 3]
@BRR = dso_local constant [2 x [2 x i32]] [[2 x i32] [i32 1, i32 2], [2 x i32] [i32 3, i32 4]]
@uninit = dso_local global i32 0
@global = dso_local global i32 123
@arr = dso_local global [3 x i32] [i32 4, i32 5, i32 6]
@brr = dso_local global [2 x [2 x i32]] [[2 x i32] [i32 1, i32 2], [2 x i32] [i32 3, i32 4]]
define dso_local i32 @add(i32 %0, i32 %1) {
2:
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32
	store i32 %1, i32* %4
	ret i32 0
}
define dso_local i32 @getArr([2 x i32]* %0) {
1:
	%2 = alloca [2 x i32]*
	store [2 x i32]* %0, [2 x i32]** %2
	ret i32 0
}
define dso_local i32 @printArr(i32* %0) {
1:
	%2 = alloca i32*
	store i32* %0, i32** %2
	ret i32 0
}
define dso_local void @print() {
0:
	ret void
}
define dso_local i32 @main() {
0:
	%1 = alloca i32
	store i32 123, i32* %1
	store i32 114514, i32* %1
	%2 = getelementptr [3 x i32], [3 x i32]* @arr, i32 0, i32 0
	store i32 1919810, i32* %2
	%3 = getelementptr [2 x [2 x i32]], [2 x [2 x i32]]* @brr, i32 0, i32 0, i32 0
	store i32 114514, i32* %3
	ret i32 0
}
