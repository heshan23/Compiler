.macro getInt
li $v0, 5
syscall
.end_macro
.macro putInt
li $v0, 1
syscall
.end_macro
.macro putCh
li $v0, 11
syscall
.end_macro
.macro putStr
li $v0, 4
syscall
.end_macro
.data
N: .word 510
M: .word -520
KK: .word -1
NN: .word 55
MM: .word 2222
K: .word -24
a_3: .word 4,5,
a_4: .word 899,99,1222,25555,
a_1: .word 1,2,
a_2: .word 2,
a: .space 2040
b: .space 1040400
n: .word 0
m: .word 0
xxxx: .word 0
yyyy: .word 0
t: .word 1234
u: .word 2345
d: .word 4,-2,15,6,
tmp_0: .word 0,1,2,3,4,
hs_new_global_str_0: .asciiz "YeG1\n"
hs_new_global_str_1: .asciiz "YeG2\n"
hs_new_global_str_2: .asciiz "YeG3\n"
hs_new_global_str_3: .asciiz "YeG4\n"
hs_new_global_str_4: .asciiz "YeG5\n"
hs_new_global_str_5: .asciiz " -- "
.text
jal main
li $v0, 10
syscall
pr:
pr_0:
#ret void
jr $ra
nonsense:
nonsense_0:
#ret void
jr $ra
matrix:
matrix_0:
#%1 = alloca [2 x [4 x i32]]
addiu $k0, $sp, -32
sw $k0, 0($sp)
#%2 = getelementptr [2 x [4 x i32]], [2 x [4 x i32]]* %1, i32 0, i32 0, i32 0
lw $v1, 0($sp)
sw $v1, -36($sp)
#store i32 -1, i32* %2
li $k0, -1
lw $k1, -36($sp)
sw $k0, 0($k1)
#%3 = getelementptr [2 x [4 x i32]], [2 x [4 x i32]]* %1, i32 0, i32 0, i32 1
lw $v1, 0($sp)
addiu $v1, $v1, 4
sw $v1, -40($sp)
#store i32 8, i32* %3
li $v0, 8
lw $k0, -40($sp)
sw $v0, 0($k0)
#%4 = getelementptr [2 x [4 x i32]], [2 x [4 x i32]]* %1, i32 0, i32 0, i32 2
lw $v1, 0($sp)
addiu $v1, $v1, 8
sw $v1, -44($sp)
#store i32 -8, i32* %4
li $k1, -8
lw $v0, -44($sp)
sw $k1, 0($v0)
#%5 = getelementptr [2 x [4 x i32]], [2 x [4 x i32]]* %1, i32 0, i32 0, i32 3
lw $v1, 0($sp)
addiu $v1, $v1, 12
sw $v1, -48($sp)
#store i32 24, i32* %5
li $k0, 24
lw $k1, -48($sp)
sw $k0, 0($k1)
#%6 = getelementptr [2 x [4 x i32]], [2 x [4 x i32]]* %1, i32 0, i32 1, i32 0
lw $v1, 0($sp)
addiu $v1, $v1, 16
sw $v1, -52($sp)
#store i32 -1, i32* %6
li $v0, -1
lw $k0, -52($sp)
sw $v0, 0($k0)
#%7 = getelementptr [2 x [4 x i32]], [2 x [4 x i32]]* %1, i32 0, i32 1, i32 1
lw $v1, 0($sp)
addiu $v1, $v1, 20
sw $v1, -56($sp)
#store i32 -8, i32* %7
li $k1, -8
lw $v0, -56($sp)
sw $k1, 0($v0)
#%8 = getelementptr [2 x [4 x i32]], [2 x [4 x i32]]* %1, i32 0, i32 1, i32 2
lw $v1, 0($sp)
addiu $v1, $v1, 24
sw $v1, -60($sp)
#store i32 1, i32* %8
li $k0, 1
lw $k1, -60($sp)
sw $k0, 0($k1)
#%9 = getelementptr [2 x [4 x i32]], [2 x [4 x i32]]* %1, i32 0, i32 1, i32 3
lw $v1, 0($sp)
addiu $v1, $v1, 28
sw $v1, -64($sp)
#store i32 2, i32* %9
li $v0, 2
lw $k0, -64($sp)
sw $v0, 0($k0)
#%10 = alloca [3 x i32]
addiu $k0, $sp, -80
sw $k0, -68($sp)
#%11 = getelementptr [3 x i32], [3 x i32]* %10, i32 0, i32 0
lw $v1, -68($sp)
sw $v1, -84($sp)
#store i32 1, i32* %11
li $k1, 1
lw $v0, -84($sp)
sw $k1, 0($v0)
#%12 = getelementptr [3 x i32], [3 x i32]* %10, i32 0, i32 1
lw $v1, -68($sp)
addiu $v1, $v1, 4
sw $v1, -88($sp)
#store i32 -2, i32* %12
li $k0, -2
lw $k1, -88($sp)
sw $k0, 0($k1)
#%13 = getelementptr [3 x i32], [3 x i32]* %10, i32 0, i32 2
lw $v1, -68($sp)
addiu $v1, $v1, 8
sw $v1, -92($sp)
#store i32 3, i32* %13
li $v0, 3
lw $k0, -92($sp)
sw $v0, 0($k0)
#%14 = getelementptr [5 x i32], [5 x i32]* @tmp_0, i32 0, i32 0
la $v1, tmp_0
sw $v1, -96($sp)
#store i32 26, i32* %14
li $k1, 26
lw $v0, -96($sp)
sw $k1, 0($v0)
#store i32 33, i32* %2
li $k0, 33
lw $k1, -36($sp)
sw $k0, 0($k1)
#ret void
jr $ra
logic:
logic_0:
#%1 = icmp sle i32 0, 0
li $v0, 0
li $k0, 0
sle $k1, $v0, $k0
sw $k1, -100($sp)
#br i1 %1, label %2, label %mid61
lw $v0, -100($sp)
bgtz $v0, logic_2
j logic_mid61
logic_2:
#move %4 <- 0
li $k0, 0
sw $k0, -104($sp)
#br label %3
j logic_3
logic_mid61:
#move %4 <- 0
li $k1, 0
sw $k1, -104($sp)
#br label %3
j logic_3
logic_3:
#%5 = icmp sge i32 %4, 0
lw $v0, -104($sp)
li $k0, 0
sge $k1, $v0, $k0
sw $k1, -108($sp)
#br i1 %5, label %6, label %mid62
lw $v0, -108($sp)
bgtz $v0, logic_6
j logic_mid62
logic_6:
#move %8 <- 0
li $k0, 0
sw $k0, -112($sp)
#br label %7
j logic_7
logic_mid62:
#move %8 <- %4
lw $k1, -104($sp)
sw $k1, -112($sp)
#br label %7
j logic_7
logic_7:
#%9 = icmp slt i32 %8, 100
lw $v0, -112($sp)
li $k0, 100
slt $k1, $v0, $k0
sw $k1, -116($sp)
#br i1 %9, label %10, label %13
lw $v0, -116($sp)
bgtz $v0, logic_10
j logic_13
logic_10:
#%11 = icmp sgt i32 0, 100
li $k0, 0
li $k1, 100
sgt $v0, $k0, $k1
sw $v0, -120($sp)
#br i1 %11, label %12, label %13
lw $k0, -120($sp)
bgtz $k0, logic_12
j logic_13
logic_12:
#br label %13
j logic_13
logic_13:
#%14 = icmp eq i32 %8, 0
lw $k1, -112($sp)
li $v0, 0
seq $k0, $k1, $v0
sw $k0, -124($sp)
#br i1 %14, label %15, label %18
lw $k1, -124($sp)
bgtz $k1, logic_15
j logic_18
logic_15:
#%16 = icmp ne i32 0, 0
li $v0, 0
li $k0, 0
sne $k1, $v0, $k0
sw $k1, -128($sp)
#br i1 %16, label %17, label %18
lw $v0, -128($sp)
bgtz $v0, logic_17
j logic_18
logic_17:
#br label %18
j logic_18
logic_18:
#br i1 %14, label %19, label %23
lw $k0, -124($sp)
bgtz $k0, logic_19
j logic_23
logic_19:
#%20 = icmp eq i32 0, 0
li $k1, 0
li $v0, 0
seq $k0, $k1, $v0
sw $k0, -132($sp)
#br i1 %20, label %21, label %23
lw $k1, -132($sp)
bgtz $k1, logic_21
j logic_23
logic_21:
#%22 = getelementptr inbounds [6 x i8], [6 x i8]* @hs_new_global_str_0, i32 0, i32 0
#call void @putstr(i8* %22)
la $a0, hs_new_global_str_0
putStr
#br label %23
j logic_23
logic_23:
#%24 = icmp eq i32 0, %8
li $v0, 0
lw $k0, -112($sp)
seq $k1, $v0, $k0
sw $k1, -140($sp)
#br i1 %24, label %27, label %25
lw $v0, -140($sp)
bgtz $v0, logic_27
j logic_25
logic_25:
#%26 = icmp ne i32 0, 0
li $k0, 0
li $k1, 0
sne $v0, $k0, $k1
sw $v0, -144($sp)
#br i1 %26, label %27, label %29
lw $k0, -144($sp)
bgtz $k0, logic_27
j logic_29
logic_27:
#%28 = getelementptr inbounds [6 x i8], [6 x i8]* @hs_new_global_str_1, i32 0, i32 0
#call void @putstr(i8* %28)
la $a0, hs_new_global_str_1
putStr
#br label %29
j logic_29
logic_29:
#%30 = icmp ne i32 %8, 0
lw $k1, -112($sp)
li $v0, 0
sne $k0, $k1, $v0
sw $k0, -152($sp)
#br i1 %30, label %33, label %31
lw $k1, -152($sp)
bgtz $k1, logic_33
j logic_31
logic_31:
#%32 = icmp eq i32 0, 0
li $v0, 0
li $k0, 0
seq $k1, $v0, $k0
sw $k1, -156($sp)
#br i1 %32, label %33, label %35
lw $v0, -156($sp)
bgtz $v0, logic_33
j logic_35
logic_33:
#%34 = getelementptr inbounds [6 x i8], [6 x i8]* @hs_new_global_str_2, i32 0, i32 0
#call void @putstr(i8* %34)
la $a0, hs_new_global_str_2
putStr
#br label %35
j logic_35
logic_35:
#br i1 %24, label %38, label %36
lw $k0, -140($sp)
bgtz $k0, logic_38
j logic_36
logic_36:
#%37 = icmp eq i32 0, 0
li $k1, 0
li $v0, 0
seq $k0, $k1, $v0
sw $k0, -164($sp)
#br i1 %37, label %38, label %40
lw $k1, -164($sp)
bgtz $k1, logic_38
j logic_40
logic_38:
#%39 = getelementptr inbounds [6 x i8], [6 x i8]* @hs_new_global_str_3, i32 0, i32 0
#call void @putstr(i8* %39)
la $a0, hs_new_global_str_3
putStr
#br label %40
j logic_40
logic_40:
#br i1 %24, label %41, label %45
lw $v0, -140($sp)
bgtz $v0, logic_41
j logic_45
logic_41:
#%42 = icmp eq i32 0, 0
li $k0, 0
li $k1, 0
seq $v0, $k0, $k1
sw $v0, -172($sp)
#br i1 %42, label %43, label %45
lw $k0, -172($sp)
bgtz $k0, logic_43
j logic_45
logic_43:
#%44 = getelementptr inbounds [6 x i8], [6 x i8]* @hs_new_global_str_4, i32 0, i32 0
#call void @putstr(i8* %44)
la $a0, hs_new_global_str_4
putStr
#br label %45
j logic_45
logic_45:
#%47 = icmp ne i1 %24, 0
lw $k1, -140($sp)
li $v0, 0
sne $k0, $k1, $v0
sw $k0, -180($sp)
#br i1 %47, label %48, label %mid63
lw $k1, -180($sp)
bgtz $k1, logic_48
j logic_mid63
logic_48:
#move %50 <- 0
li $v0, 0
sw $v0, -184($sp)
#br label %49
j logic_49
logic_mid63:
#move %50 <- %8
lw $k0, -112($sp)
sw $k0, -184($sp)
#br label %49
j logic_49
logic_49:
#%51 = icmp eq i32 0, 0
li $k1, 0
li $v0, 0
seq $k0, $k1, $v0
sw $k0, -188($sp)
#%53 = icmp ne i32 %50, %51
lw $k1, -184($sp)
lw $v0, -188($sp)
sne $k0, $k1, $v0
sw $k0, -192($sp)
#br i1 %53, label %54, label %55
lw $k1, -192($sp)
bgtz $k1, logic_54
j logic_55
logic_54:
#br label %56
j logic_56
logic_55:
#br label %56
j logic_56
logic_56:
#ret void
jr $ra
getInt:
getInt_0:
#%1 = call i32 @getint() 
getInt
sw $v0, -196($sp)
#ret i32 %1
lw $v0, -196($sp)
jr $ra
prd:
lw $k0, 12($sp)
sw $k0, -200($sp)
lw $k0, 8($sp)
sw $k0, -204($sp)
lw $k0, 4($sp)
sw $k0, -208($sp)
prd_3:
#%4 = alloca [2 x i32]*
addiu $k0, $sp, -220
sw $k0, -212($sp)
#store [2 x i32]* %0, [2 x i32]** %4
lw $v0, -200($sp)
sw $v0, -212($sp)
#%5 = alloca i32*
#store i32* %2, i32** %5
lw $k0, -208($sp)
sw $k0, -224($sp)
#move %7 <- 0
li $k1, 0
sw $k1, -228($sp)
#move %8 <- 0
li $v0, 0
sw $v0, -232($sp)
#br label %6
j prd_6
prd_6:
#%9 = icmp sge i32 %8, 0
lw $k0, -232($sp)
li $k1, 0
sge $v0, $k0, $k1
sw $v0, -236($sp)
#br i1 %9, label %10, label %25
lw $k0, -236($sp)
bgtz $k0, prd_10
j prd_25
prd_10:
#%11 = load [2 x i32]*, [2 x i32]** %4
lw $k1, -212($sp)
sw $k1, -240($sp)
#%12 = getelementptr [2 x i32], [2 x i32]* %11, i32 %8, i32 %7
lw $v1, -240($sp)
li $v0, 8
lw $k0, -232($sp)
mult $v0, $k0
mflo $v0
addu $v1, $v1, $v0
li $k1, 4
lw $v0, -228($sp)
mult $k1, $v0
mflo $k1
addu $v1, $v1, $k1
sw $v1, -244($sp)
#%13 = load i32, i32* %12
lw $k0, -244($sp)
lw $k1, 0($k0)
sw $k1, -248($sp)
#call void @putint(i32 %13)
lw $a0, -248($sp)
putInt
#call void @putch(i32 10)
li $a0, 10
putCh
#%14 = add i32 %7, 1
lw $v0, -228($sp)
li $k0, 1
addu $k1, $v0, $k0
sw $k1, -252($sp)
#%15 = icmp eq i32 %14, 2
lw $v0, -252($sp)
li $k0, 2
seq $k1, $v0, $k0
sw $k1, -256($sp)
#br i1 %15, label %16, label %mid64
lw $v0, -256($sp)
bgtz $v0, prd_16
j prd_mid64
prd_16:
#%17 = add i32 %8, 1
lw $k0, -232($sp)
li $k1, 1
addu $v0, $k0, $k1
sw $v0, -260($sp)
#move %19 <- 0
li $k0, 0
sw $k0, -264($sp)
#move %20 <- %17
lw $k1, -260($sp)
sw $k1, -268($sp)
#br label %18
j prd_18
prd_mid64:
#move %19 <- %14
lw $v0, -252($sp)
sw $v0, -264($sp)
#move %20 <- %8
lw $k0, -232($sp)
sw $k0, -268($sp)
#br label %18
j prd_18
prd_18:
#%21 = icmp eq i32 %20, 2
lw $k1, -268($sp)
li $v0, 2
seq $k0, $k1, $v0
sw $k0, -272($sp)
#br i1 %21, label %22, label %23
lw $k1, -272($sp)
bgtz $k1, prd_22
j prd_23
prd_22:
#br label %25
j prd_25
prd_23:
#br label %24
j prd_24
prd_24:
#move %7 <- %19
lw $v0, -264($sp)
sw $v0, -228($sp)
#move %8 <- %20
lw $k0, -268($sp)
sw $k0, -232($sp)
#br label %6
j prd_6
prd_25:
#ret void
jr $ra
f1:
lw $k0, 4($sp)
sw $k0, -276($sp)
f1_1:
#call void @putint(i32 %0)
lw $a0, -276($sp)
putInt
#ret void
jr $ra
f2:
lw $k0, 4($sp)
sw $k0, -280($sp)
f2_1:
#%2 = alloca [2 x i32]*
addiu $k0, $sp, -292
sw $k0, -284($sp)
#store [2 x i32]* %0, [2 x i32]** %2
lw $k1, -280($sp)
sw $k1, -284($sp)
#%3 = load [2 x i32]*, [2 x i32]** %2
lw $v0, -284($sp)
sw $v0, -296($sp)
#%4 = getelementptr [2 x i32], [2 x i32]* %3, i32 0, i32 1
lw $v1, -296($sp)
addiu $v1, $v1, 4
sw $v1, -300($sp)
#store i32 10000, i32* %4
li $k0, 10000
lw $k1, -300($sp)
sw $k0, 0($k1)
#ret void
jr $ra
f3:
lw $k0, 4($sp)
sw $k0, -304($sp)
f3_1:
#ret void
jr $ra
f4:
lw $k0, 4($sp)
sw $k0, -308($sp)
f4_1:
#%2 = alloca i32*
#store i32* %0, i32** %2
lw $v0, -308($sp)
sw $v0, -312($sp)
#ret void
jr $ra
f5:
lw $k0, 8($sp)
sw $k0, -316($sp)
lw $k0, 4($sp)
sw $k0, -320($sp)
f5_2:
#%3 = alloca i32*
#store i32* %1, i32** %3
lw $k0, -320($sp)
sw $k0, -324($sp)
#ret void
jr $ra
main:
main_0:
#call void @pr()
sw $ra, -328($sp)
addiu $sp, $sp, -332
jal pr
addiu $sp, $sp, 332
lw $ra, -328($sp)
#call void @nonsense()
sw $ra, -328($sp)
addiu $sp, $sp, -332
jal nonsense
addiu $sp, $sp, 332
lw $ra, -328($sp)
#%1 = call i32 @getInt() 
sw $ra, -332($sp)
addiu $sp, $sp, -336
jal getInt
addiu $sp, $sp, 336
lw $ra, -332($sp)
sw $v0, -328($sp)
#store i32 %1, i32* @n
lw $k1, -328($sp)
la $v0, n
sw $k1, 0($v0)
#%2 = call i32 @getInt() 
sw $ra, -336($sp)
addiu $sp, $sp, -340
jal getInt
addiu $sp, $sp, 340
lw $ra, -336($sp)
sw $v0, -332($sp)
#store i32 %2, i32* @m
lw $k0, -332($sp)
la $k1, m
sw $k0, 0($k1)
#call void @matrix()
sw $ra, -336($sp)
addiu $sp, $sp, -340
jal matrix
addiu $sp, $sp, 340
lw $ra, -336($sp)
#%3 = load i32, i32* @n
la $v0, n
lw $v0, 0($v0)
sw $v0, -336($sp)
#call void @f1(i32 %3)
sw $ra, -340($sp)
lw $k0, -336($sp)
sw $k0, -344($sp)
addiu $sp, $sp, -348
jal f1
addiu $sp, $sp, 348
lw $ra, -340($sp)
#%4 = getelementptr [2 x [2 x i32]], [2 x [2 x i32]]* @d, i32 0, i32 0
la $v1, d
sw $v1, -340($sp)
#call void @f2([2 x i32]* %4)
sw $ra, -344($sp)
lw $k1, -340($sp)
sw $k1, -348($sp)
addiu $sp, $sp, -352
jal f2
addiu $sp, $sp, 352
lw $ra, -344($sp)
#%5 = load i32, i32* @n
la $v0, n
lw $v0, 0($v0)
sw $v0, -344($sp)
#%6 = load i32, i32* @m
la $k0, m
lw $k0, 0($k0)
sw $k0, -348($sp)
#%7 = add i32 %5, %6
lw $k1, -344($sp)
lw $v0, -348($sp)
addu $k0, $k1, $v0
sw $k0, -352($sp)
#call void @f3(i32 %7)
sw $ra, -356($sp)
lw $k1, -352($sp)
sw $k1, -360($sp)
addiu $sp, $sp, -364
jal f3
addiu $sp, $sp, 364
lw $ra, -356($sp)
#%8 = getelementptr [5 x i32], [5 x i32]* @tmp_0, i32 0, i32 0
la $v1, tmp_0
sw $v1, -356($sp)
#%9 = load i32, i32* %8
lw $v0, -356($sp)
lw $k0, 0($v0)
sw $k0, -360($sp)
#%10 = getelementptr [5 x i32], [5 x i32]* @tmp_0, i32 0, i32 1
la $v1, tmp_0
addiu $v1, $v1, 4
sw $v1, -364($sp)
#%11 = load i32, i32* %10
lw $k1, -364($sp)
lw $v0, 0($k1)
sw $v0, -368($sp)
#%12 = add i32 %9, %11
lw $k0, -360($sp)
lw $k1, -368($sp)
addu $v0, $k0, $k1
sw $v0, -372($sp)
#call void @f3(i32 %12)
sw $ra, -376($sp)
lw $k0, -372($sp)
sw $k0, -380($sp)
addiu $sp, $sp, -384
jal f3
addiu $sp, $sp, 384
lw $ra, -376($sp)
#%13 = getelementptr [1 x [1 x i32]], [1 x [1 x i32]]* @a_2, i32 0, i32 0, i32 0
la $v1, a_2
sw $v1, -376($sp)
#%14 = load i32, i32* %13
lw $k1, -376($sp)
lw $v0, 0($k1)
sw $v0, -380($sp)
#%15 = load i32, i32* %13
lw $k0, -376($sp)
lw $k1, 0($k0)
sw $k1, -384($sp)
#%16 = add i32 %14, %15
lw $v0, -380($sp)
lw $k0, -384($sp)
addu $k1, $v0, $k0
sw $k1, -388($sp)
#call void @f3(i32 %16)
sw $ra, -392($sp)
lw $v0, -388($sp)
sw $v0, -396($sp)
addiu $sp, $sp, -400
jal f3
addiu $sp, $sp, 400
lw $ra, -392($sp)
#%17 = load i32, i32* %13
lw $k0, -376($sp)
lw $k1, 0($k0)
sw $k1, -392($sp)
#%18 = load i32, i32* %8
lw $v0, -356($sp)
lw $k0, 0($v0)
sw $k0, -396($sp)
#%19 = mul i32 %17, %18
lw $k1, -392($sp)
lw $v0, -396($sp)
mult $k1, $v0
mflo $k0
sw $k0, -400($sp)
#call void @f3(i32 %19)
sw $ra, -404($sp)
lw $k1, -400($sp)
sw $k1, -408($sp)
addiu $sp, $sp, -412
jal f3
addiu $sp, $sp, 412
lw $ra, -404($sp)
#%20 = load i32, i32* %8
lw $v0, -356($sp)
lw $k0, 0($v0)
sw $k0, -404($sp)
#%21 = load i32, i32* @n
la $k1, n
lw $k1, 0($k1)
sw $k1, -408($sp)
#%22 = add i32 %20, %21
lw $v0, -404($sp)
lw $k0, -408($sp)
addu $k1, $v0, $k0
sw $k1, -412($sp)
#call void @f3(i32 %22)
sw $ra, -416($sp)
lw $v0, -412($sp)
sw $v0, -420($sp)
addiu $sp, $sp, -424
jal f3
addiu $sp, $sp, 424
lw $ra, -416($sp)
#%23 = load i32, i32* %13
lw $k0, -376($sp)
lw $k1, 0($k0)
sw $k1, -416($sp)
#%24 = load i32, i32* @m
la $v0, m
lw $v0, 0($v0)
sw $v0, -420($sp)
#%25 = add i32 %23, %24
lw $k0, -416($sp)
lw $k1, -420($sp)
addu $v0, $k0, $k1
sw $v0, -424($sp)
#call void @f3(i32 %25)
sw $ra, -428($sp)
lw $k0, -424($sp)
sw $k0, -432($sp)
addiu $sp, $sp, -436
jal f3
addiu $sp, $sp, 436
lw $ra, -428($sp)
#%26 = getelementptr [2 x [2 x i32]], [2 x [2 x i32]]* @d, i32 0, i32 1
la $v1, d
addiu $v1, $v1, 8
sw $v1, -428($sp)
#%27 = getelementptr [2 x i32], [2 x i32]* %26, i32 0, i32 0
lw $v1, -428($sp)
sw $v1, -432($sp)
#call void @f4(i32* %27)
sw $ra, -436($sp)
lw $k1, -432($sp)
sw $k1, -440($sp)
addiu $sp, $sp, -444
jal f4
addiu $sp, $sp, 444
lw $ra, -436($sp)
#%28 = load i32, i32* %8
lw $v0, -356($sp)
lw $k0, 0($v0)
sw $k0, -436($sp)
#%29 = getelementptr [2 x i32], [2 x i32]* %4, i32 0, i32 0
lw $v1, -340($sp)
sw $v1, -440($sp)
#call void @f5(i32 %28,i32* %29)
sw $ra, -444($sp)
lw $k1, -436($sp)
sw $k1, -448($sp)
lw $v0, -440($sp)
sw $v0, -452($sp)
addiu $sp, $sp, -456
jal f5
addiu $sp, $sp, 456
lw $ra, -444($sp)
#%30 = load i32, i32* @n
la $k0, n
lw $k0, 0($k0)
sw $k0, -444($sp)
#call void @f5(i32 %30,i32* %8)
sw $ra, -448($sp)
lw $k1, -444($sp)
sw $k1, -452($sp)
lw $v0, -356($sp)
sw $v0, -456($sp)
addiu $sp, $sp, -460
jal f5
addiu $sp, $sp, 460
lw $ra, -448($sp)
#call void @logic()
sw $ra, -448($sp)
addiu $sp, $sp, -452
jal logic
addiu $sp, $sp, 452
lw $ra, -448($sp)
#%31 = load i32, i32* @m
la $k0, m
lw $k0, 0($k0)
sw $k0, -448($sp)
#%32 = icmp eq i32 0, %31
li $k1, 0
lw $v0, -448($sp)
seq $k0, $k1, $v0
sw $k0, -452($sp)
#br i1 %32, label %33, label %34
lw $k1, -452($sp)
bgtz $k1, main_33
j main_34
main_33:
#move %41 <- 1
li $v0, 1
sw $v0, -456($sp)
#br label %40
j main_40
main_34:
#%35 = icmp sle i32 0, %31
li $k0, 0
lw $k1, -448($sp)
sle $v0, $k0, $k1
sw $v0, -460($sp)
#br i1 %35, label %36, label %37
lw $k0, -460($sp)
bgtz $k0, main_36
j main_37
main_36:
#move %39 <- 1
li $k1, 1
sw $k1, -464($sp)
#br label %38
j main_38
main_37:
#move %39 <- 2
li $v0, 2
sw $v0, -464($sp)
#br label %38
j main_38
main_38:
#move %41 <- %39
lw $k0, -464($sp)
sw $k0, -456($sp)
#br label %40
j main_40
main_40:
#%42 = icmp eq i32 0, %41
li $k1, 0
lw $v0, -456($sp)
seq $k0, $k1, $v0
sw $k0, -468($sp)
#br i1 %42, label %43, label %44
lw $k1, -468($sp)
bgtz $k1, main_43
j main_44
main_43:
#br label %45
j main_45
main_44:
#br label %45
j main_45
main_45:
#%46 = load i32, i32* @n
la $v0, n
lw $v0, 0($v0)
sw $v0, -472($sp)
#call void @putint(i32 %46)
lw $a0, -472($sp)
putInt
#%47 = getelementptr inbounds [5 x i8], [5 x i8]* @hs_new_global_str_5, i32 0, i32 0
#call void @putstr(i8* %47)
la $a0, hs_new_global_str_5
putStr
#%48 = load i32, i32* @m
la $k0, m
lw $k0, 0($k0)
sw $k0, -480($sp)
#call void @putint(i32 %48)
lw $a0, -480($sp)
putInt
#call void @putch(i32 10)
li $a0, 10
putCh
#call void @prd([2 x i32]* %4,i32 100,i32* %8)
sw $ra, -484($sp)
lw $k1, -340($sp)
sw $k1, -488($sp)
li $v0, 100
sw $v0, -492($sp)
lw $k0, -356($sp)
sw $k0, -496($sp)
addiu $sp, $sp, -500
jal prd
addiu $sp, $sp, 500
lw $ra, -484($sp)
#%49 = load i32, i32* @n
la $k1, n
lw $k1, 0($k1)
sw $k1, -484($sp)
#%50 = load i32, i32* @m
la $v0, m
lw $v0, 0($v0)
sw $v0, -488($sp)
#%51 = add i32 %49, %50
lw $k0, -484($sp)
lw $k1, -488($sp)
addu $v0, $k0, $k1
sw $v0, -492($sp)
#call void @putint(i32 %51)
lw $a0, -492($sp)
putInt
#call void @putch(i32 10)
li $a0, 10
putCh
#%52 = load i32, i32* @n
la $k0, n
lw $k0, 0($k0)
sw $k0, -496($sp)
#%53 = load i32, i32* @m
la $k1, m
lw $k1, 0($k1)
sw $k1, -500($sp)
#%54 = sub i32 %52, %53
lw $v0, -496($sp)
lw $k0, -500($sp)
subu $k1, $v0, $k0
sw $k1, -504($sp)
#call void @putint(i32 %54)
lw $a0, -504($sp)
putInt
#call void @putch(i32 10)
li $a0, 10
putCh
#%55 = load i32, i32* @n
la $v0, n
lw $v0, 0($v0)
sw $v0, -508($sp)
#%56 = load i32, i32* @m
la $k0, m
lw $k0, 0($k0)
sw $k0, -512($sp)
#%57 = mul i32 %55, %56
lw $k1, -508($sp)
lw $v0, -512($sp)
mult $k1, $v0
mflo $k0
sw $k0, -516($sp)
#call void @putint(i32 %57)
lw $a0, -516($sp)
putInt
#call void @putch(i32 10)
li $a0, 10
putCh
#%58 = load i32, i32* @n
la $k1, n
lw $k1, 0($k1)
sw $k1, -520($sp)
#%59 = load i32, i32* @m
la $v0, m
lw $v0, 0($v0)
sw $v0, -524($sp)
#%60 = srem i32 %58, %59
lw $k0, -520($sp)
lw $k1, -524($sp)
div $k0, $k1
mfhi $v0
sw $v0, -528($sp)
#call void @putint(i32 %60)
lw $a0, -528($sp)
putInt
#call void @putch(i32 10)
li $a0, 10
putCh
#ret i32 0
li $v0, 0
jr $ra
