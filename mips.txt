.macro getInt
li $v0, 5
syscall
.end_macro
.macro putInt
li $v0, 1
syscall
.end_macro
.macro putCh
li $v0, 11
syscall
.end_macro
.macro putStr
li $v0, 4
syscall
.end_macro
.data
hs_new_global_str_0: .asciiz ", "
.text
jal main
li $v0, 10
syscall
fib:
fib_1:
#%2 = icmp eq i32 %0, 1
li $k1, 1
seq $t0, $a1, $k1
#br i1 %2, label %3, label %4
bgtz $t0, fib_3
j fib_4
fib_3:
#ret i32 1
li $v0, 1
jr $ra
fib_4:
#%5 = icmp eq i32 %0, 2
li $k0, 2
seq $t0, $a1, $k0
#br i1 %5, label %6, label %7
bgtz $t0, fib_6
j fib_7
fib_6:
#ret i32 2
li $v0, 2
jr $ra
fib_7:
#%8 = sub i32 %0, 1
li $k1, 1
subu $t0, $a1, $k1
#%9 = call i32 @fib(i32 %8) 
sw $ra, 0($sp)
sw $t1, -4($sp)
sw $a1, -8($sp)
sw $t0, -12($sp)
move $a1, $t0
addiu $sp, $sp, -20
jal fib
addiu $sp, $sp, 20
lw $ra, 0($sp)
lw $t1, -4($sp)
lw $a1, -8($sp)
lw $t0, -12($sp)
move $t0, $v0
#%10 = sub i32 %0, 2
li $k0, 2
subu $t1, $a1, $k0
#%11 = call i32 @fib(i32 %10) 
sw $ra, 0($sp)
sw $t1, -4($sp)
sw $a1, -8($sp)
sw $t0, -12($sp)
move $a1, $t1
addiu $sp, $sp, -20
jal fib
addiu $sp, $sp, 20
lw $ra, 0($sp)
lw $t1, -4($sp)
lw $a1, -8($sp)
lw $t0, -12($sp)
move $t1, $v0
#%12 = add i32 %9, %11
addu $t0, $t0, $t1
#ret i32 %12
move $v0, $t0
jr $ra
main:
main_0:
#%1 = call i32 @getint() 
getInt
move $t0, $v0
#%2 = call i32 @getint() 
getInt
move $t1, $v0
#%3 = alloca [2 x i32]
addiu $k0, $sp, -4
move $t2, $k0
#%4 = getelementptr [2 x i32], [2 x i32]* %3, i32 0, i32 0
move $v1, $t2
move $t3, $v1
#store i32 1, i32* %4
li $k1, 1
sw $k1, 0($t3)
#%5 = getelementptr [2 x i32], [2 x i32]* %3, i32 0, i32 1
move $v1, $t2
addiu $v1, $v1, 4
move $t3, $v1
#store i32 2, i32* %5
li $k0, 2
sw $k0, 0($t3)
#%6 = mul i32 %1, %2
mult $t0, $t1
mflo $t0
#%7 = sub i32 0, %6
li $k1, 0
subu $t0, $k1, $t0
#%8 = call i32 @fib(i32 4) 
sw $ra, -8($sp)
sw $t1, -12($sp)
sw $t3, -16($sp)
sw $t0, -20($sp)
sw $t2, -24($sp)
li $a1, 4
addiu $sp, $sp, -32
jal fib
addiu $sp, $sp, 32
lw $ra, -8($sp)
lw $t1, -12($sp)
lw $t3, -16($sp)
lw $t0, -20($sp)
lw $t2, -24($sp)
move $t1, $v0
#%9 = mul i32 %7, %8
mult $t0, $t1
mflo $t0
#%10 = call i32 @fib(i32 1) 
sw $ra, -8($sp)
sw $t1, -12($sp)
sw $t3, -16($sp)
sw $t0, -20($sp)
sw $t2, -24($sp)
li $a1, 1
addiu $sp, $sp, -32
jal fib
addiu $sp, $sp, 32
lw $ra, -8($sp)
lw $t1, -12($sp)
lw $t3, -16($sp)
lw $t0, -20($sp)
lw $t2, -24($sp)
move $t1, $v0
#%11 = getelementptr [2 x i32], [2 x i32]* %3, i32 0, i32 %10
move $v1, $t2
li $k0, 4
mult $k0, $t1
mflo $k0
addu $v1, $v1, $k0
move $t1, $v1
#%12 = load i32, i32* %11
lw $k1, 0($t1)
move $t1, $k1
#%13 = add i32 %9, %12
addu $t0, $t0, $t1
#%14 = mul i32 %13, 5
sll $k0, $t0, 2
addu $t0, $k0, $t0
#%15 = call i32 @fib(i32 6) 
sw $ra, -8($sp)
sw $t1, -12($sp)
sw $t3, -16($sp)
sw $t0, -20($sp)
sw $t2, -24($sp)
li $a1, 6
addiu $sp, $sp, -32
jal fib
addiu $sp, $sp, 32
lw $ra, -8($sp)
lw $t1, -12($sp)
lw $t3, -16($sp)
lw $t0, -20($sp)
lw $t2, -24($sp)
move $t1, $v0
#%16 = call i32 @fib(i32 %15) 
sw $ra, -8($sp)
sw $t1, -12($sp)
sw $t3, -16($sp)
sw $t0, -20($sp)
sw $t2, -24($sp)
move $a1, $t1
addiu $sp, $sp, -32
jal fib
addiu $sp, $sp, 32
lw $ra, -8($sp)
lw $t1, -12($sp)
lw $t3, -16($sp)
lw $t0, -20($sp)
lw $t2, -24($sp)
move $t1, $v0
#%17 = sub i32 41440, %16
li $k0, 41440
subu $t1, $k0, $t1
#%18 = add i32 %17, -10091
li $k1, -10091
addu $t1, $t1, $k1
#call void @putint(i32 %14)
move $a0, $t0
putInt
#%19 = getelementptr inbounds [3 x i8], [3 x i8]* @hs_new_global_str_0, i32 0, i32 0
#call void @putstr(i8* %19)
la $a0, hs_new_global_str_0
putStr
#call void @putint(i32 %18)
move $a0, $t1
putInt
#call void @putstr(i8* %19)
la $a0, hs_new_global_str_0
putStr
#call void @putint(i32 -5)
li $a0, -5
putInt
#call void @putch(i32 10)
li $a0, 10
putCh
#ret i32 0
li $v0, 0
jr $ra
